@model HuntControl.WebUI.Models.CustomerAddModel
@{
                /**/

                /**/

                var EmployeesAutorised = (HuntControl.Domain.Concrete.spr_settings)ViewBag.EmployeesAutorised;
                var NameOrganization = (HuntControl.Domain.Concrete.spr_settings)ViewBag.NameOrganization;
                var SerialHuntingLic = (HuntControl.Domain.Concrete.spr_settings)ViewBag.SerialHuntingLic;
}
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/jquery.custom.validate.js"></script>
<script src="~/Content/plugins/bootstrap-select/dist/js/bootstrap-select.min.js" type="text/javascript"></script>
<link href="~/Content/plugins/bootstrap-fileinput/css/fileinput.min.css" rel="stylesheet" />
<link href="~/Content/plugins/bootstrap-fileinput/themes/explorer/theme.min.css" rel="stylesheet" />
<script src="~/Content/plugins/bootstrap-fileinput/js/fileinput.min.js"></script>
<script src="~/Content/plugins/bootstrap-fileinput/themes/explorer/theme.min.js"></script>
<script src="~/Content/plugins/bootstrap-fileinput/js/locales/ru.js"></script>
<script src="~/Content/js/WebCam/webcam.js"></script>
<script src="~/Content/plugins/notifyjs/dist/notify.min.js"></script>
<script src="~/Content/plugins/notifications/notify-metro.js"></script>
<script>
    function checkCustomerDoc(serial, number) {
            console.log("--3--");

                $.ajax({
                type: 'POST',
                url: '@Url.Action("GetCustomerDataInfo", "Case")',
                    data: { customerDocSerial: serial, customerDocNumber: number },
                    success: function (data) {
                    if (data.out_customer_fio != null) {
                        $.Notification.notify('success', 'top right', 'Найдены данные заявителя');
                        $('input#data_customer_customer_name').val(data.out_customer_fio);
                        $('select#data_customer_customer_sex').val(data.out_customer_sex).change();
                        $('input#data_customer_customer_snils').val(data.out_customer_snils);
                        $('input#data_customer_legal_address').val(data.out_customer_address);
                        $('input#data_customer_actual_address').val(data.out_customer_address);
                        $('input#data_customer_e_mail').val(data.out_customer_email);
                        $('input#data_customer_phone_number2').val(data.out_customer_tel2);
                        $('input#data_customer_phone_number1').val(data.out_customer_tel1);
                        $('input#data_customer_customer_inn').val(data.out_customer_inn);
                        $('input#data_customer_doc_code').val(data.out_customer_doc_code);
                        $('input#data_customer_doc_issue_body').val(data.out_customer_doc_issue_body);
                        $('input#data_customer_doc_issue_date').val(moment(data.out_customer_doc_issue_date).format("DD.MM.YYYY"));
                        $('input#data_customer_doc_birth_place').val(data.out_customer_doc_birth_place);
                        $('input#data_customer_doc_birth_date').val(moment(data.out_customer_doc_birth_date).format("DD.MM.YYYY"));
                    }
                }
            });
            }
    $(document).ready(function () {

     var inputSerial = document.getElementById("data_customer_doc_serial");
        var inputNUmber = document.getElementById("data_customer_doc_number");
        if (inputSerial.value.trim() && inputNUmber.value.trim()) {
            checkCustomerDoc(inputSerial.value, inputNUmber.value);
    }


        $('.selectpicker').selectpicker();
        var social_incapable = new Switchery(document.querySelector('#data_customer_social_incapable'));
        var social_pensioner = new Switchery(document.querySelector('#data_customer_social_pensioner'));

        $("#uploadFile").fileinput({
            theme: "explorer",
            showUpload: false,
            maxFileCount: 1,
            language: 'ru',
            browseClass: 'btn btn-default',
            allowedFileExtensions: ['jpg', 'png', 'jpeg', 'bmp']
        });

        $('input[data-type=date]').datepicker({ format: 'dd.mm.yyyy', autoclose: true, language: 'ru', orientation: 'top' });

        $('.slimscroll-customer').slimScroll({
            height: '100%',
            position: 'right',
            size: "10px",
            color: '#98a6ad',
            wheelStep: 20,
            railVisible: true,
            railColor: '#666',
            railOpacity: 0.1,
            alwaysVisible: true
        });

        $('input[data-type=doc-serial]').inputmask("9999", {
            "oncomplete": function () {
                var dataForm = $(this).data('form');
                $('input[data-form=' + dataForm + '][data-type=doc-number]').focus();
            },
            clearIncomplete: true
        });


        $('input[data-type=doc-number]').inputmask("999999", {
        "oncomplete": function () {
            var dataForm = $(this).data('form');
            var docSerial = $('input[data-form=' + dataForm + '][data-type=doc-serial]').val();
            var docNumber = $('input[data-form=' + dataForm + '][data-type=doc-number]').val();
            checkCustomerDoc(docSerial, docNumber);
            @*$.ajax({
                type: 'POST',
                url: '@Url.Action("GetCustomerDataInfo", "Case")',
                data: { customerDocSerial: docSerial, customerDocNumber: docNumber },
                success: function (data) {
                    if (data.out_customer_fio != null) {
                        $.Notification.notify('success', 'top right', 'Найдены данные заявителя');
                        $('input#data_customer_customer_name').val(data.out_customer_fio);
                        $('select#data_customer_customer_sex').val(data.out_customer_sex).change();
                        $('input#data_customer_customer_snils').val(data.out_customer_snils);
                        $('input#data_customer_legal_address').val(data.out_customer_address);
                        $('input#data_customer_actual_address').val(data.out_customer_address);
                        $('input#data_customer_e_mail').val(data.out_customer_email);
                        $('input#data_customer_phone_number2').val(data.out_customer_tel2);
                        $('input#data_customer_phone_number1').val(data.out_customer_tel1);
                        $('input#data_customer_customer_inn').val(data.out_customer_inn);
                        $('input#data_customer_doc_code').val(data.out_customer_doc_code);
                        $('input#data_customer_doc_issue_body').val(data.out_customer_doc_issue_body);
                        $('input#data_customer_doc_issue_date').val(moment(data.out_customer_doc_issue_date).format("DD.MM.YYYY"));
                        $('input#data_customer_doc_birth_place').val(data.out_customer_doc_birth_place);
                        $('input#data_customer_doc_birth_date').val(moment(data.out_customer_doc_birth_date).format("DD.MM.YYYY"));
                    }
                }
            });*@
        },
        clearIncomplete: true
        });



        $('input[data-type=doc-code]').inputmask({
            mask: '999-999',
            clearIncomplete: true
        });
        $('input[data-type=doc-snils]').inputmask({
            mask: '999-999-999 99',
            clearIncomplete: true
        });

        $('button[form="AddCustomerForm"]').click(function () {
            var form = document.forms.AddCustomerForm;
            if ($('#AddCustomerForm').valid()) {
                var formData = new FormData(form);
                var file = $('#uploadFile').fileinput('getFileStack')[0];
                if (file != null) {
                    var blob = new Blob([file], { type: 'image/jpeg' });
                    formData.append("uploadFile", blob, "photo.jpeg");
                }
                $.ajax({
                    url: '@Url.Action("SubmitCustomerSave", "ApplicantPage")',
                    type: 'POST',
                    data: formData,
                    processData: false, // Не обрабатываем файлы (Don't process the files)
                    contentType: false, // Так jQuery скажет серверу что это строковой запрос
                    success: function (data) {
                        successAdd();
                        $('#individualPageContainer').html(data);
                        $('#myModal').modal('hide');
                    }
                });
            }
        });

        $('button[data-type=btnGetSnils]').on('click', function () {
            var button = $(this);

            var customerFioElement = $("#data_customer_customer_name");
            var customerSexElement = $("#data_customer_customer_sex");
            var customerBirthDateElement = $("#data_customer_doc_birth_date");

            if (customerFioElement.valid() > 0 && customerBirthDateElement.valid() > 0) {
                var customerFio = customerFioElement.val();
                var customerSex = customerSexElement.val();
                var customerBirthDate = customerBirthDateElement.val();
                var arr = customerFio.split(' ');
                $.ajax({
                    url: '@Url.Action("GetCustomerSnils", "Case")',
                    type: 'POST',
                    data:
                    {
                        FirstName: arr[1],
                        LastName: arr[2],
                        SecondName: arr[0],
                        gender: customerSex,
                        birthDate: customerBirthDate,
                    },
                    success: function (snils) {
                        $("#data_customer_customer_snils").val(snils);
                        $("#data_customer_customer_snils").prop('disabled', false);
                        $.Notification.notify('success', 'top right', 'Найден СНИЛС', snils);
                    },
                    beforeSend: function () {
                        $("#data_customer_customer_snils").prop('disabled', true);
                        button.find('i').addClass("fa-spin");
                    },
                    complete: function () {
                        button.find('i').removeClass("fa-spin");
                    },
                    error: function (data) {
                        $.Notification.notify('error', 'top right', data.responseText);
                    }
                });
            } else {
                if (customerFioElement.valid() == 0) {
                    customerFioElement.addClass('shake animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
                        $(this).removeClass('shake animated');
                    });
                }
                if (customerBirthDateElement.valid() == 0) {
                    customerBirthDateElement.closest('.input-group').addClass('shake animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
                        $(this).removeClass('shake animated');
                    });
                }
            }
        });

        $('button[data-type=btnGetInn]').on('click', function () {
            var button = $(this);
            var customerFioElement = $("#data_customer_customer_name");
            var docSerialElement = $("#data_customer_doc_serial");
            var docNumberElement = $("#data_customer_doc_number");
            var docIssueDateElement = $("#data_customer_doc_issue_date");
            var customerBirthDateElement = $("#data_customer_doc_birth_date");

            if (customerFioElement.valid() > 0 && customerBirthDateElement.valid() > 0 && docSerialElement.valid() > 0 && docNumberElement.valid() > 0 && docIssueDateElement.valid() > 0) {
                var docIdentity = "21";
                var customerFio = customerFioElement.val();
                var docSerial = docSerialElement.val();
                var docNumber = docNumberElement.val();
                var docIssueDate = docIssueDateElement.val();
                var customerBirthDate = customerBirthDateElement.val();
                var arr = customerFio.split(' ');
                $.ajax({
                    url: '@Url.Action("GetCustomerInn", "Case")',
                    type: 'post',
                    data:
                    {
                        firstname: arr[1],
                        lastname: arr[0],
                        secondname: arr[2],
                        documenttype: docIdentity,
                        documentseries: docSerial,
                        documentnumber: docNumber,
                        documentdate: docIssueDate,
                        birthdate: customerBirthDate,
                    },
                    success: function (inn) {
                        $("#data_customer_customer_inn").val(inn);
                        $("#data_customer_customer_inn").prop('disabled', false);
                        $.Notification.notify('success', 'top right', 'Найден ИНН', inn);
                    },
                    beforeSend: function () {
                        $("#data_customer_customer_inn").prop('disabled', true);
                        button.find('i').addClass("fa-spin");
                    },
                    complete: function () {
                        button.find('i').removeClass("fa-spin");
                    },
                    error: function (data) {
                        $.Notification.notify('error', 'top right', data.responseText);
                    }
                });
            }
            else {
                if (customerFioElement.valid() == 0) {
                    customerFioElement.addClass('shake animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
                        $(this).removeClass('shake animated');
                    });
                }
                if (docSerialElement.valid() == 0) {
                    docSerialElement.addClass('shake animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
                        $(this).removeClass('shake animated');
                    });
                }
                if (docNumberElement.valid() == 0) {
                    docNumberElement.addClass('shake animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
                        $(this).removeClass('shake animated');
                    });
                }
                if (docIssueDateElement.valid() == 0) {
                    docIssueDateElement.closest('.input-group').addClass('shake animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
                        $(this).removeClass('shake animated');
                    });
                }
                if (customerBirthDateElement.valid() == 0) {
                    customerBirthDateElement.closest('.input-group').addClass('shake animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
                        $(this).removeClass('shake animated');
                    });
                }
            }
        });
    });
</script>

<div class="modal-dialog modal-lg">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h4 class="modal-title" id="myLargeModalLabel">Добавление физ. лица</h4>
        </div>
        <div class="modal-body">
            <div class="modal-body" style="height: calc(100vh - 300px);">
                <div class="slimscroll-customer p-r-20-important">
                    @using (Ajax.BeginForm("SubmitCustomerSave", "ApplicantPage", null, new AjaxOptions { LoadingElementId = "loadingAjax" }, new { @id = "AddCustomerForm", @class = "form-horizontal" }))
                    {
                        <h3 class="panel-title">Документ удостоверяющий личность</h3>
                        <hr class="m-t-0">
                        <div class="row m-b-20">
                            <div class="col-md-10 col-md-offset-1">
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-sm-6 col-md-3">
                                            <label>Серия</label>
                                            @Html.TextBoxFor(model => model.data_customer.doc_serial, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "____" }, { "data-form", "customer" }, { "data-type", "doc-serial" }, { "required", "required" } })
                                        </div>
                                        <div class="col-sm-6 col-md-3">
                                            <label>Номер</label>
                                            @Html.TextBoxFor(model => model.data_customer.doc_number, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "______" }, { "data-form", "customer" }, { "data-type", "doc-number" }, { "required", "required" } })
                                        </div>
                                        <div class="col-sm-6 col-md-3">
                                            <label>Дата выдачи</label>
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => model.data_customer.doc_issue_date, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "__.__.____" }, { "data-form", "customer" }, { "data-type", "date" }, { "required", "required" } })
                                                <span class="input-group-addon bg-custom b-0 text-white"><i class="fa fa-calendar"></i></span>
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-3">
                                            <label>Код подразделения</label>
                                            @Html.TextBoxFor(model => model.data_customer.doc_code, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "___-___" }, { "data-form", "customer" }, { "data-type", "doc-code" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label>Кем выдан</label>
                                    @Html.TextBoxFor(model => model.data_customer.doc_issue_body, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "Введите кем выдан документ" }, { "data-form", "customer" } })
                                </div>
                            </div>
                        </div>
                        <h3 class="panel-title">Персональные данные</h3>
                        <hr class="m-t-0">
                        <div class="row m-b-20">
                            <div class="col-md-10 col-md-offset-1">
                                <div id="collapseWebCam" class="panel-collapse collapse" aria-expanded="false">
                                    <div class="row">
                                        <div class="col-md-4">
                                        </div>
                                        <div class="col-md-5">
                                            <div id="my_camera"></div>
                                            <div id="results" style="display:none">
                                            </div>
                                            <button type="button" class="btn btn-success waves-effect waves-light btn-sm" onClick="save_photo()">Сфотографировать <i class="glyphicon glyphicon-camera"></i></button>
                                            <button type="button" class="btn btn-inverse waves-effect waves-light btn-sm m-r-15" id="webCamBtnHide" onclick="$('#collapseWebCam').collapse('hide');">Закрыть <i class="fa fa-times m-r-5"></i></button>
                                        </div>
                                        <div class="col-md-3"></div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-sm-11">
                                            @Html.Label("uploadImage", "Фотография", new Dictionary<string, object> { })
                                            <input id="uploadFile" type="file">
                                        </div>
                                        <div class="col-sm-1">
                                            <label>&nbsp;</label>
                                            <button type="button" class="btn btn-inverse waves-effect waves-light" id="webCamBtnShow"><i class="glyphicon glyphicon-camera"></i></button>
                                        </div>
                                    </div>
                                </div>


                                <div class="form-group">
                                    <label>ФИО</label>
                                    @Html.TextBoxFor(model => model.data_customer.customer_name, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "Введите ФИО" }, { "data-form", "customer" }, { "required", "required" } })
                                </div>
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-sm-6 col-md-4">
                                            <label>Дата рождения</label>
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => model.data_customer.doc_birth_date, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "__.__.____" }, { "data-form", "customer" }, { "data-type", "date" }, { "required", "required" } })
                                                <span class="input-group-addon bg-custom b-0 text-white"><i class="fa fa-calendar"></i></span>
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-4">
                                            <label>Пол</label>
                                            @Html.DropDownListFor(model => model.data_customer.customer_sex, new SelectList(new List<SelectListItem> { new SelectListItem { Text = "Мужской", Value = "МУЖ" }, new SelectListItem { Text = "Женский", Value = "ЖЕН" } }, "Value", "Text"), new Dictionary<string, object> { { "class", "selectpicker" }, { "data-style", "btn-white btn-sm" }, { "data-form", "customer" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label>Место рождения</label>
                                    @Html.TextBoxFor(model => model.data_customer.doc_birth_place, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "Введите место рождения" }, { "data-form", "customer" } })
                                </div>
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-sm-6 col-md-4">
                                            <label>СНИЛС</label>
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => model.data_customer.customer_snils, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "СНИЛС" }, { "data-form", "customer" }, { "data-type", "doc-snils" } })
                                                <span class="input-group-btn">
                                                    <button type="button" data-type="btnGetSnils" class="btn waves-effect waves-light btn-default"><i class="fa fa-globe font-18"></i></button>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-4">
                                            <label>ИНН</label>
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => model.data_customer.customer_inn, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "ИНН" }, { "data-form", "customer" }, { "data-type", "doc-inn" } })
                                                <span class="input-group-btn">
                                                    <button type="button" data-type="btnGetInn" class="btn waves-effect waves-light btn-default"><i class="fa fa-globe font-18"></i></button>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <h3 class="panel-title">Место работы</h3>
                        <hr class="m-t-0">
                        <div class="row m-b-20">
                            <div class="col-md-10 col-md-offset-1">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.data_customer.social_organization_info, new Dictionary<string, object> { })
                                    @Html.TextBoxFor(model => model.data_customer.social_organization_info, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", Html.DisplayNameFor(model => model.data_customer.social_organization_info) }, { "data-form", "customer" } })
                                </div>
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-md-5">
                                            @Html.LabelFor(model => model.data_customer.social_job_position, new Dictionary<string, object> { })
                                            @Html.TextBoxFor(model => model.data_customer.social_job_position, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", Html.DisplayNameFor(model => model.data_customer.social_job_position) }, { "data-form", "customer" } })
                                        </div>
                                        <div class="col-sm-6 col-md-3 col-md-offset-1">
                                            @Html.LabelFor(model => model.data_customer.social_pensioner, new Dictionary<string, object> { })
                                            <div>
                                                @Html.CheckBox("data_customer.social_pensioner", Model.data_customer.social_pensioner ?? false, new { @class = "js-switch extra-small", @type = "checkbox", @data_switchery = "true", @data_plugin = "switchery", @data_color = "#5fbeaa" })
                                            </div>
                                        </div>
                                        <div class="col-sm-6 col-md-3">
                                            @Html.LabelFor(model => model.data_customer.social_incapable, new Dictionary<string, object> { })
                                            <div>
                                                @Html.CheckBox("data_customer.social_incapable", Model.data_customer.social_incapable ?? false, new { @class = "js-switch extra-small", @type = "checkbox", @data_switchery = "true", @data_plugin = "switchery", @data_color = "#5fbeaa" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <h3 class="panel-title">Контакты</h3>
                        <hr class="m-t-0">
                        <div class="row m-b-20">
                            <div class="col-md-10 col-md-offset-1">
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <label>Адрес регистрации</label>
                                            @Html.TextBoxFor(model => model.data_customer.legal_address, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "Введите адрес регистрации" }, { "data-form", "customer" } })
                                        </div>
                                        <div class="col-sm-6">
                                            <label>Адрес проживания</label>
                                            @Html.TextBoxFor(model => model.data_customer.actual_address, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "Введите место проживания" }, { "data-form", "customer" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-sm-6 col-md-3">
                                            <label>Телефон</label>
                                            @Html.TextBoxFor(model => model.data_customer.phone_number1, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "+7(___) ___-____" }, { "data-form", "customer" }, { "data-type", "phone-number" } })
                                        </div>
                                        <div class="col-sm-6 col-md-3">
                                            <label>Телефон 2</label>
                                            @Html.TextBoxFor(model => model.data_customer.phone_number2, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "+7(___) ___-____" }, { "data-form", "customer" }, { "data-type", "phone-number" } })
                                        </div>
                                        <div class="col-md-6">
                                            <label>E-mail</label>
                                            @Html.TextBoxFor(model => model.data_customer.e_mail, new Dictionary<string, object> { { "class", "form-control" }, { "data-form", "customer" } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <h3 class="panel-title"><span class="m-r-5">Охотничий билет</span> <input type="checkbox" id="customer_ticket_switchery" class="js-switch extra-small" data-plugin="switchery" data-color="#5fbeaa"></h3>
                        <hr class="m-t-0">
                        <div class="row m-b-20">
                            <div class="col-md-10 col-md-offset-1">
                                <fieldset id="customer_ticket_fields" style="display: none;">
                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-sm-6 col-md-3">
                                                <label>Серия</label>
                                                @Html.TextBox("data_customer_hunting_lic.serial_license", SerialHuntingLic.param_value, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "Серия" }, { "data-form", "customer" }, { "required", "required" } })
                                            </div>
                                            <div class="col-sm-6 col-md-3">
                                                <label>Номер</label>
                                                @Html.TextBoxFor(model => model.data_customer_hunting_lic.number_license, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "______" }, { "data-form", "customer" }, { "required", "required" } })
                                            </div>
                                            <div class="col-sm-6 col-md-3">
                                                <label>Дата выдачи</label>
                                                <div class="input-group">
                                                    @Html.TextBoxFor(model => model.data_customer_hunting_lic.issue_date, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "__.__.____" }, { "data-form", "customer" }, { "data-type", "date" }, { "required", "required" } })
                                                    <span class="input-group-addon bg-custom b-0 text-white"><i class="fa fa-calendar"></i></span>
                                                </div>
                                            </div>
                                            <div class="col-sm-6 col-md-3">
                                                <label>Дата в реестре</label>
                                                <div class="input-group">
                                                    @Html.TextBoxFor(model => model.data_customer_hunting_lic.reestr_date, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "__.__.____" }, { "data-form", "customer" }, { "data-type", "date" }, { "required", "required" } })
                                                    <span class="input-group-addon bg-custom b-0 text-white"><i class="fa fa-calendar"></i></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <label>Уполномоченное лицо</label>
                                                @Html.TextBox("data_customer_hunting_lic.employees_authorized", EmployeesAutorised.param_value, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "Уполномоченное лицо" }, { "data-form", "customer" }, { "required", "required" } })
                                            </div>
                                            <div class="col-md-6">
                                                <label>Кем выдан</label>
                                                @Html.TextBox("data_customer_hunting_lic.issue_body", NameOrganization.param_value, new Dictionary<string, object> { { "class", "form-control" }, { "placeholder", "Кем выдан" }, { "data-form", "customer" }, { "required", "required" } })
                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-cancel waves-effect waves-light" data-dismiss="modal"><i class="fa fa-times m-r-5"></i> Отмена</button>
            <button type="button" form="AddCustomerForm" class="btn btn-success waves-effect waves-light"> Сохранить <i class="fa fa-check m-l-5"></i></button>
        </div>

    </div><!-- /.modal-content -->
</div><!-- /.modal-dialog -->

<script>
    var customerTicketSwitchery = new Switchery(document.querySelector('#customer_ticket_switchery'));
    var $customerTicketFields = $('#customer_ticket_fields');

    $('#customer_ticket_switchery').change(function () {
        if (document.querySelector('#customer_ticket_switchery').checked) {
            $customerTicketFields.slideDown('fast');
            $('.slimscroll-customer').animate({
                scrollTop: $('#AddCustomerForm').height()
            }, 500);
        } else {
            $customerTicketFields.slideUp('fast');
        }
    });
</script>

<script>
    $('button#webCamBtnShow').on('click', function () {
        $('#collapseWebCam').collapse('show');
    });


</script>

<!-- Configure a few settings and attach camera -->
<script language="JavaScript">
    Webcam.set({
        // live preview size
        width: 320,
        height: 240,

        // device capture size
        dest_width: 640,
        dest_height: 480,

        // final cropped size
        crop_width: 480,
        crop_height: 480,

        // format and quality
        image_format: 'jpeg',
        jpeg_quality: 90,

        // flip horizontal (mirror mode)
        flip_horiz: true
    });
    Webcam.attach('#my_camera');
</script>
<script language="JavaScript">
    // preload shutter audio clip
    var shutter = new Audio();
    shutter.autoplay = false;
    shutter.src = navigator.userAgent.match(/Firefox/) ? '/Content/js/WebCam/shutter.ogg' : '/Content/js/WebCam/shutter.mp3';

    function save_photo() {
        try { shutter.currentTime = 0; } catch (e) { ; } // fails in IE
        shutter.play();
        Webcam.snap(function (data_uri) {
            $('#cam').val(data_uri);
            var b64Data = data_uri.substring(data_uri.indexOf(',') + 1);
            var blob = b64toBlob(b64Data, 'image/jpeg');
            console.log(blob);
            var file = new File([blob], 'web_cam.jpeg');
            $('#uploadFile').fileinput('readFiles', [file]);
        });
    }
    function b64toBlob(b64Data, contentType, sliceSize) {
        contentType = contentType || '';
        sliceSize = sliceSize || 512;

        var byteCharacters = atob(b64Data);
        var byteArrays = [];

        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            var slice = byteCharacters.slice(offset, offset + sliceSize);

            var byteNumbers = new Array(slice.length);
            for (var i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }

            var byteArray = new Uint8Array(byteNumbers);

            byteArrays.push(byteArray);
        }

        var blob = new Blob(byteArrays, { type: contentType });
        return blob;
    }

</script>